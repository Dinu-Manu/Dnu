const { cmd, commands } = require("../command");
const yts = require("yt-search");
const { ytmp3 } = require("@vreden/youtube_scraper");

cmd(
{
pattern: "vre",
alias: "ytmp3", // Add a comma here
react: "üéµ",
desc: "Download Song",
category: "download",
filename: __filename,
},
async (
robin,
mek,
m,
{
from,
quoted,
body,
isCmd,
command,
args,
q,
isGroup,
sender,
senderNumber,
botNumber2,
botNumber,
pushname,
isMe,
isOwner,
groupMetadata,
groupName,
participants,
groupAdmins,
isBotAdmins,
isAdmins,
reply,
}
) => {
try {
if (!q) return reply("‡∂±‡∂∏‡∂ö‡∑ä ‡∑Ñ‡∂ª‡∑í ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∂ª‡∑í ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± üåö‚ù§Ô∏è");

// Search for the video  
  const search = await yts(q);  
  if (!search.videos.length) return reply("‚ùå Video not found!");  

  const data = search.videos[0];  
  const url = data.url;  

  // Song metadata description  
  // SONG DESCRIPTION TEMPLATE (Fixed string interpolation)
let desc = `„Ä≤üé∂ùôΩùôæùöÜ ùöÑùôøùôªùôæùô∞ùô≥ùô∏ùôΩùô∂...„ãû||üïäÔ∏è

üñáÔ∏èùöÉùô∏ùöÉùôªùô¥     : ${data.title}
‚úÑùöÑùöÅùôª         : ${data.url}
‚ú®ùöÉùô∏ùôºùô¥       : ${data.timestamp}      
‚ú∞ùöÑùôøùôªùôæùô∞ùô≥  : ${data.ago}
‚ó≤ùöÖùô∏ùô¥ùöÜùöÇ‚ó±  : ${data.views}

> #DŒπŒ∑·µ§W üÖ±üÖ±üÖ∑ …±œÖ ÇŒπ∆à —ï—Ç—É‚Ñì—î„ãõ‚òö

*||‡∂Ö‡∂±‡∑í‡∑Ä‡∑è‡∂ª‡∑ô‡∂±‡∑ä‡∂∏ ‡∂ª‡∑í‡∂∫‡∑ê‡∂ö‡∑ä‡∂ß‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∑Ö‡∂∏‡∂∫‡∑ù...üïäÔ∏èüåº ‡∂î‡∂∫‡∑è‡∂ú‡∑ô ‡∂Ü‡∑É‡∂∏ ‡∑É‡∑í‡∂±‡∑ä‡∂Ø‡∑î ‡∂Ö‡∑Ñ‡∂±‡∑ä‡∂± ‡∑É‡∑ô‡∂ß‡∑ä ‡∑Ä‡∑ô‡∂Ω‡∑è ‡∂â‡∂±‡∑ä‡∂±...üòöüíñ*
> *ùô∑ùô¥ùô∞ùô≥ùôøùô∑ùôæùôΩùô¥ Oùöó ùôµùô¥ùô¥ùôª ùöÉùô∑ùô¥ ùöÖùô∏ùô±ùô¥!*

*üñáÔ∏èALL MUSIC PLAY LIST üëá*
_https://whatsapp.com/channel/0029Vb3mqn5H5JLuJO3s3Z1J/2311_`;

// SEND THUMBNAIL WITH DESCRIPTION FIRST
await robin.sendMessage(
  from,
  {
    image: { url: data.thumbnail },
    caption: desc,
  },
  { quoted: mek }
);

// DOWNLOAD AUDIO
const quality = "128";
const songData = await ytmp3(url, quality);

if (!songData || !songData.download?.url) {
  return reply("‚ùå Failed to download the song!");
}

// CHECK DURATION
let durationParts = data.timestamp.split(":").map(Number);
let totalSeconds =
  durationParts.length === 3
    ? durationParts[0] * 3600 + durationParts[1] * 60 + durationParts[2]
    : durationParts[0] * 60 + durationParts[1];

if (totalSeconds > 1800) {
  return reply("‚è±Ô∏è Audio limit is 30 minutes!");
}

// SEND AS PTT (VOICE TYPE)
await robin.sendMessage(
  from,
  {
    audio: { url: songData.download.url },
    mimetype: "audio/mpeg",
    ptt: true,
  },
  { quoted: mek }
);
